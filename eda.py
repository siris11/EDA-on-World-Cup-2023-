# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HdWAEF0o1RHZSWfennwc0nJN2Ci64up2
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

df = pd.read_csv("/content/CWC23_all_innings.csv")

df.shape

df.columns

df.head()

df.tail()

df.info()

df.describe()

df.isnull().sum()

cat = df.select_dtypes(include="object").columns
cat

df["not_out"].unique()

df["overs"]=df["overs"].fillna(df["overs"].interpolate())
df["mdns"]=df["mdns"].fillna(df["mdns"].interpolate())
df["econ"]=df["econ"].fillna(df["econ"].interpolate())

df["sr"]=df["sr"].fillna(df["sr"].mean())
df["mins"]=df["mins"].fillna(df["mins"].mean())

from sklearn.impute import SimpleImputer

wkts_impute = SimpleImputer(strategy="most_frequent")
df["wkts"] = wkts_impute.fit_transform(df[["wkts"]])

not_out_impute =SimpleImputer(strategy="most_frequent")
df["not_out"] =not_out_impute.fit_transform(df[["not_out"]])

four_impute =SimpleImputer(strategy="most_frequent")
df["4s"] =four_impute.fit_transform(df[["4s"]])

sixs_impute =SimpleImputer(strategy="most_frequent")
df["6s"] =sixs_impute.fit_transform(df[["6s"]])

df.isnull().sum()

df.head()

"""## How many teams"""

df["team"].unique()

"""## which team won by scoring the max runs"""

df.iloc[df["runs"].idxmax()]

df.iloc[df["runs"].idxmin()]

"""## which team took max. no. of wickets"""

df.iloc[df["wkts"].idxmax()]

"""## which team took min no. of wickets"""

df.iloc[df["wkts"].idxmin()]

"""## 2)"""

df["player"].mode()

df["player"].value_counts()

df.iloc[df["6s"].idxmax()]

df.iloc[df["4s"].idxmax()]

df.head()

bowl = df[(df["bat_or_bowl"]=="bowl") & (df["wkts"]>3) &(df["wicketball_prob"]>0.03 )]

sns.barplot(x=bowl["wkts"],y=bowl["player"],data=bowl)

df["bat_or_bowl"].unique()
x=df["runs"].unique()
x.mean()
df["runs_per_ball"].value_counts()
df["runs_per_ball"].isin([2]).sum()

bat = df[(df["bat_or_bowl"]=="bat") & (df["runs"]>50) & (df["runs_per_ball"]>1.3) ]

sns.barplot(x=bat["runs"],y=bat["player"],data=bat)

sns.lineplot(x=df["runs"],y=df["4s"],data=df)

sns.lineplot(x=df["runs"],y=df["6s"],data=df)

df["ground"].unique()

average_runs_per_ground = df.groupby("ground")["runs"].mean().reset_index()
average_runs_per_ground.max()

plt.figure(figsize=(12, 6))
plt.plot(average_runs_per_ground["ground"], average_runs_per_ground["runs"], color='skyblue')
plt.xlabel('Ground')
plt.ylabel('Average Runs')
plt.title('Average Runs on Each Ground')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout()

# Show the plot
plt.show()

df["ground"].unique()

ax=sns.lineplot(x=average_runs_per_ground["ground"], y=average_runs_per_ground["runs"],data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")
plt.tight_layout()
plt.title("Avearage no. of runs")
plt.show()

average_runs_per_opposition = df.groupby("opposition")["runs"].mean().reset_index()
average_runs_per_opposition

ax=sns.lineplot(x=average_runs_per_opposition["opposition"], y=average_runs_per_opposition["runs"],data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")
plt.tight_layout()
plt.show()

average_wkts_per_opposition = df.groupby("opposition")["wkts"].mean().reset_index()

ax=sns.lineplot(x=average_wkts_per_opposition["opposition"], y=average_wkts_per_opposition["wkts"],data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")
plt.tight_layout()
plt.show()

## so other teams are taking less wickets vs india..so it indicates india is performing well.

average_sixes_per_opposition = df.groupby("opposition")["4s"].mean().reset_index()
average_sixes_per_opposition

ax=sns.lineplot(x=average_sixes_per_opposition["opposition"], y=average_sixes_per_opposition["4s"],data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha="right")
plt.tight_layout()
plt.show()

team_stats = df.groupby('team').agg({
    'runs': 'sum',
    'wkts': 'sum'
}).reset_index()

team_stats = team_stats.sort_values(by='runs', ascending=False)
#team_stats = team_stats.sort_values(by='wkts', ascending=False)
team_stats

team_stats = df.groupby('team').agg({
    'runs': 'sum',
    'wkts': 'sum'
}).reset_index()

#team_stats = team_stats.sort_values(by='runs', ascending=False)
team_stats = team_stats.sort_values(by='wkts', ascending=False)
team_stats

team_stats = df.groupby('team').agg({
    'runs': 'sum',
    'wkts': 'sum'
}).reset_index()

team_stats

df.iloc[df["mdns"].idxmax()]



